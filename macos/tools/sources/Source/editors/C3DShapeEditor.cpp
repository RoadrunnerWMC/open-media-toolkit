/*****************************************************************        O P E N      M E D I A     T O O L K I T              V2.5             Copyright Yves Schmid 1996-2003         See www.garagecube.com for more informations about this library.                Author(s): Yves Schmid         OMT is provided under LGPL:           This library is free software; you can redistribute it and/or          modify it under the terms of the GNU Lesser General Public          License as published by the Free Software Foundation; either          version 2.1 of the License, or (at your option) any later version.          This library is distributed in the hope that it will be useful,          but WITHOUT ANY WARRANTY; without even the implied warranty of          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          Lesser General Public License for more details.          You should have received a copy of the GNU Lesser General Public          License along with this library; if not, write to the Free Software          Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          The full text of the license can be found in lgpl.txt          ******************************************************************/#include "C3DShapeEditor.h"#include "AppConstants.h"#include "LOMTWindow.h"#include "LOMTWorldView.h"#include "OMedia3DMaterial.h"#include "OMedia3DShape.h"#include "OMedia3DShapeElement.h"#include "OMediaString.h"C3DShapeEditor::C3DShapeEditor(omt_FSChunkID id, CDBDocument *myDocument):				CAbstractEditor(OMedia3DShape::db_type,id,myDocument){	updateMode = false;	wv = NULL;	clickedMat = UNDEFINED_MAT;		shape = (OMedia3DShape*)object;	window = LWindow::CreateWindow(2003, this );	window->SetThemeData(kThemeBackgroundPlacard, kThemeBackgroundPlacard,							 kThemeTextColorDialogActive, kThemeTextColorDialogInactive);	linkBroacasters();	setTitle();	((LOMTWindow*)window)->init_video_engine();	init_3dview();	updateUI();	window->Show();}C3DShapeEditor::~C3DShapeEditor(){}void C3DShapeEditor::ListenToMessage(	MessageT		inMessage,							void*			ioParam){	bool modified = false;	if (updateMode) return;		switch(inMessage)	{		case msgViewPortChanged:		updateView();		break;			case msgViewPortPicked:		handleClick((OMediaPickRequest*)ioParam);		break;				case msgMsgEditFieldChanged:		processEditFieldChanged((LEditField*)ioParam);			break;				case 2000:	// Center		shape->center();		updateView();		modified = true;		break;				case 2001: // Transform		modified = transform();		updateInfo();		break;		case 2002: // Normals		modified = smoothNormals();		updateInfo();		break;				case 2003: // Cullling		modified = changeCulling();		updateInfo();		break;		case 2004:	// Merge vertices		modified = mergeVertices();		updateInfo();		break;		case 2006:	// Compiled			shape->lock(omlf_Write);		if (getControlVal(35)) shape->set_flags(omshfc_CompileStatic);		else shape->set_flags(shape->get_flags()&(~omshfc_CompileStatic));		shape->unlock();		modified = true;		break;				case 1024:	// Motion mode		switch(getControlVal(11))		{			case 1: wv->set_view_mode(CENTRED_VIEWLIGHT); break;			case 2: wv->set_view_mode(FREEMOTION_VIEW); break;		}		updateView();		break;				case 1025:	// Reset view value		resetView();		break;				case 1200:		if (clickedMat!=UNDEFINED_MAT)		{			omt_FSChunkID id = -1;			if (clickedMat) id = clickedMat->get_chunk_ID();						if (myDocument->pickObject(window, OMedia3DMaterial::db_type, id))			{				OMedia3DMaterial *mat = omd_GETOBJECT(myDocument->dbase,OMedia3DMaterial,id);								shape->lock(omlf_Write);				omt_PolygonList::iterator pi;				for(pi=shape->get_polygons()->begin();					pi!=shape->get_polygons()->end();					pi++)				{					if ((*pi).get_material()==clickedMat)						(*pi).set_material(mat);				}				shape->unlock();								clickedMat = mat;				updateClickedMaterial();				mat->db_unlock();				modified = true;			}		}		break;		case 1201:		if (clickedMat!=UNDEFINED_MAT)		{					shape->lock(omlf_Write);						omt_PolygonList::iterator pi;			for(pi=shape->get_polygons()->begin();				pi!=shape->get_polygons()->end();				pi++)			{				if ((*pi).get_material()==clickedMat)					(*pi).set_material(NULL);			}			shape->unlock();						clickedMat = NULL;					updateClickedMaterial();			modified = true;		}		break;		case 1202:		if (clickedMat!=UNDEFINED_MAT)		{			if (clickedMat) 				myDocument->edit(OMedia3DMaterial::db_type,								 clickedMat->get_chunk_ID());		}		break;			}	if (modified)	{		if (wv) wv->Refresh();		myDocument->SetModified(true);		shape->set_modified(true);	}}void C3DShapeEditor::linkBroacasters(){	int i;	for(i=30;i<=35;i++) addControlListener(i);	for(i=51;i<=53;i++) addControlListener(i);	for(i=12;i<=18;i++) addMsgEditFieldListener(i);	addControlListener(19);		addControlListener(11);}void C3DShapeEditor::updateUI(){	updateInfo();	updateView();	updateClickedMaterial();	setControlVal(35,(shape->get_flags()&omshfc_CompileStatic)!=0);}void C3DShapeEditor::updateInfo(){	setCaptionDesc(70, omd_L2STR(shape->get_polygons()->size()));	setCaptionDesc(71, omd_L2STR(shape->get_vertices()->size()));	setCaptionDesc(72, omd_D2STR(shape->get_radius()));}void C3DShapeEditor::updateView(){	updateMode = true;	updatePosAngleFields();		wv->UpdateViewport();		setEditFieldFloat(12,wv->viewport->getx());	setEditFieldFloat(13,wv->viewport->gety());	setEditFieldFloat(14,wv->viewport->getz());	setEditFieldFloat(15,omd_Angle2DegF(wv->viewport->get_anglex()));	setEditFieldFloat(16,omd_Angle2DegF(wv->viewport->get_angley()));	setEditFieldFloat(17,omd_Angle2DegF(wv->viewport->get_anglez()));	setEditFieldFloat(18,wv->motionSpeed);	updateMode = false;}void C3DShapeEditor::processEditFieldChanged(LEditField *field){	int id = field->GetPaneID();	double d;	getEditFieldFloat(id,d);	bool updateAngle = false;		switch(id)	{		case 12: wv->viewport->setx(d); break;		case 13: wv->viewport->sety(d); break;		case 14: wv->viewport->setz(d); break;		case 15: updateAngle = true; break;		case 16: updateAngle = true; break;		case 17: updateAngle = true; break;		case 18: wv->motionSpeed = d; break;	}		if (updateAngle)	{		double ax,ay,az;		getEditFieldFloat(15,ax);		getEditFieldFloat(16,ay);		getEditFieldFloat(17,az);				ax = omd_Deg2AngleF(ax);		ay = omd_Deg2AngleF(ay);		az = omd_Deg2AngleF(az);				wv->axisShape.reset_axis();		wv->axisShape.get_axis(omc3daxis_X).rotate(ax,ay,az);		wv->axisShape.get_axis(omc3daxis_Y).rotate(ax,ay,az);		wv->axisShape.get_axis(omc3daxis_Z).rotate(ax,ay,az);				wv->axisLight.reset_axis();		wv->axisLight.get_axis(omc3daxis_X).rotate(ax,ay,az);				wv->axisLight.get_axis(omc3daxis_Y).rotate(ax,ay,az);				wv->axisLight.get_axis(omc3daxis_Z).rotate(ax,ay,az);			}		wv->Refresh();}void C3DShapeEditor::resetView(){	if (wv->view_Mode==FREEMOTION_VIEW)	{		setEditFieldFloat(12,0);		setEditFieldFloat(13,0);		setEditFieldFloat(14,0);		setEditFieldFloat(15,0);		setEditFieldFloat(16,0);		setEditFieldFloat(17,0);		setEditFieldFloat(18,2);		wv->axisShape.reset_axis();		wv->axisLight.reset_axis();	}	else	{		wv->vp_distance = shape->get_radius()*-2.0f;		wv->axisShape.reset_axis();		wv->axisLight.reset_axis();	}		wv->Refresh();}void C3DShapeEditor::init_3dview(){	LOMTWindow		*omw = (LOMTWindow*)window;		wv = dynamic_cast<LOMTWorldView*>(window->FindPaneByID(80)); Assert_(wv != nil);	wv->prepare(omw);	wv->pickingOn = true;			e_shape = new OMedia3DShapeElement;	e_shape->link(wv->world);	e_shape->place(0,0,0);	e_shape->set_shape(shape);		wv->mouseRotateShape = e_shape;	wv->vp_distance = shape->get_radius()*-2.0f;	wv->layer->add_flags(omlayerf_ClearZBuffer|omlayerf_EnableZBufferWrite|omlayerf_EnableZBufferTest);	wv->AddListener(this);}void C3DShapeEditor::objectWillDie(omt_ChunkType dtype, omt_FSChunkID did){	if (dtype==OMedia3DMaterial::db_type && clickedMat!=NULL && clickedMat!=UNDEFINED_MAT)	{		if (clickedMat->get_chunk_ID()==did)		{			clickedMat=UNDEFINED_MAT;					updateClickedMaterial();			if (wv) wv->Refresh();		}	}}void C3DShapeEditor::objectRenamed(omt_ChunkType dtype, omt_FSChunkID did){	if (dtype==OMedia3DMaterial::db_type && clickedMat!=NULL && clickedMat!=UNDEFINED_MAT)	{		if (clickedMat->get_chunk_ID()==did)		{			updateObjectPickZone(50,clickedMat);			if (wv) wv->Refresh();		}	}}void C3DShapeEditor::updateClickedMaterial(){	int baseID = 50;	if (clickedMat==UNDEFINED_MAT)	{		LControl *c;		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+1)); Assert_(c != nil);		c->Disable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+2)); Assert_(c != nil);		c->Disable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+3)); Assert_(c != nil);		c->Disable();		setCaptionDesc(baseID,"- NO POLYGON PICKED -");			}	else	{		updateObjectPickZone(baseID, clickedMat);	} }void C3DShapeEditor::handleClick(OMediaPickRequest *request){	clickedMat = UNDEFINED_MAT;	if (request->closer_hit.type==omptc_Element &&		request->closer_hit.element==e_shape)	{				if (request->closer_hit.sub_info.size())		{			long p = request->closer_hit.sub_info[0].polygon;			if (p!=-1)			{				clickedMat = (*(shape->get_polygons()))[p].get_material();				clickedPoly = p;			}		}	}		updateClickedMaterial();}void C3DShapeEditor::updatePosAngleFields(){	LEditField *e;		for(int i=12;i<=18;i++)	{		e = dynamic_cast<LEditField*>(window->FindPaneByID(i)); Assert_(e != nil);		if (wv->view_Mode==FREEMOTION_VIEW) e->Enable();		else e->Disable();			}	}bool C3DShapeEditor::transform(void){	StDialogHandler	theHandler(1105, window);	LWindow*		theDialog = theHandler.GetDialog();	LEditField		*ef;	LStr255			pstr;	int				i;	bool			modified = false;	theDialog->SetThemeData(kThemeBackgroundPlacard, kThemeBackgroundPlacard,							 kThemeTextColorDialogActive, kThemeTextColorDialogInactive);	ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(1));	theDialog->SetLatentSub(ef);	for(i=1;i<=3;i++) 	{		ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(i));		ef->SetDescriptor("\p0.0");	}		for(i=4;i<=6;i++)	{		ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(i));		ef->SetDescriptor("\p1.0");	}		for(i=7;i<=9;i++)	{		ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(i));		ef->SetDescriptor("\p0.0");	}			theDialog->Show();	MessageT	hitMessage;	for(;;)	{		hitMessage = theHandler.DoDialog();		if (hitMessage!=msg_Nothing) break;	}		if (hitMessage==msg_OK)	{		float vals[9];		string str;			modified = true;		for(i=1;i<=9;i++)		{			ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(i));				ef->GetDescriptor(pstr);			str = myDocument->Str255toString(pstr);			vals[i-1] = omd_STR2D(str);		}				shape->lock(omlf_Write);		shape->translate(vals[0],vals[1],vals[2]);		shape->scale(vals[3],vals[4],vals[5]);		shape->rotate(omd_Deg2AngleF(vals[6]),omd_Deg2AngleF(vals[7]),omd_Deg2AngleF(vals[8]));		shape->unlock();		wv->Refresh();		}		return modified;}bool C3DShapeEditor::smoothNormals(void){	StDialogHandler	theHandler(1106, window);	LWindow*		theDialog = theHandler.GetDialog();	LEditField		*ef;	LStr255			pstr;	bool			modified = false;	theDialog->SetThemeData(kThemeBackgroundPlacard, kThemeBackgroundPlacard,							 kThemeTextColorDialogActive, kThemeTextColorDialogInactive);	ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(1));	theDialog->SetLatentSub(ef);	ef->SelectAll();	ef->SetDescriptor("\p0.3");			theDialog->Show();	MessageT	hitMessage;	for(;;)	{		hitMessage = theHandler.DoDialog();		if (hitMessage!=msg_Nothing) break;	}		if (hitMessage==msg_OK)	{		float val;		string str;			modified = true;		ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(1));			ef->GetDescriptor(pstr);		str = myDocument->Str255toString(pstr);		val = omd_STR2D(str);		if (val<0.0f) val = 0.0f;		else if (val>1.0f) val = 1.0f;				shape->lock(omlf_Write);		if (val==1.0f) shape->compute_normals();		else shape->compute_normals(val);		shape->unlock();		wv->Refresh();		}		return modified;}bool C3DShapeEditor::changeCulling(void){	StDialogHandler	theHandler(1107, window);	LWindow*		theDialog = theHandler.GetDialog();	LStr255			pstr;	bool			modified = false;	LRadioGroupView	*rg;	theDialog->SetThemeData(kThemeBackgroundPlacard, kThemeBackgroundPlacard,							 kThemeTextColorDialogActive, kThemeTextColorDialogInactive);	rg = dynamic_cast<LRadioGroupView*>(theDialog->FindPaneByID(10));	rg->SetCurrentRadioID(1);		theDialog->Show();	MessageT	hitMessage;	for(;;)	{		hitMessage = theHandler.DoDialog();		if (hitMessage==msg_OK ||			hitMessage ==msg_Cancel) break;	}		if (hitMessage==msg_OK)	{		string 		str;			modified = true;		shape->lock(omlf_Write);		switch(rg->GetCurrentRadioID())		{			case 1:			shape->set_two_sided(true);			break;			case 2:			shape->set_two_sided(false);			break;		}				shape->unlock();		wv->Refresh();		}		return modified;}bool C3DShapeEditor::mergeVertices(void){	StDialogHandler	theHandler(1108, window);	LWindow*		theDialog = theHandler.GetDialog();	LEditField		*ef;	LStr255			pstr;	bool			modified = false;	theDialog->SetThemeData(kThemeBackgroundPlacard, kThemeBackgroundPlacard,							 kThemeTextColorDialogActive, kThemeTextColorDialogInactive);	ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(1));	theDialog->SetLatentSub(ef);	ef->SelectAll();	ef->SetDescriptor("\p0.0");			theDialog->Show();	MessageT	hitMessage;	for(;;)	{		hitMessage = theHandler.DoDialog();		if (hitMessage!=msg_Nothing) break;	}		if (hitMessage==msg_OK)	{		float val;		string str;			modified = true;		ef = dynamic_cast<LEditField*>(theDialog->FindPaneByID(1));			ef->GetDescriptor(pstr);		str = myDocument->Str255toString(pstr);		val = omd_STR2D(str);				shape->lock(omlf_Write);		shape->merge_points(val);		shape->unlock();		wv->Refresh();		}		return modified;}