/*****************************************************************        O P E N      M E D I A     T O O L K I T              V2.5             Copyright Yves Schmid 1996-2003         See www.garagecube.com for more informations about this library.                Author(s): Yves Schmid         OMT is provided under LGPL:           This library is free software; you can redistribute it and/or          modify it under the terms of the GNU Lesser General Public          License as published by the Free Software Foundation; either          version 2.1 of the License, or (at your option) any later version.          This library is distributed in the hope that it will be useful,          but WITHOUT ANY WARRANTY; without even the implied warranty of          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          Lesser General Public License for more details.          You should have received a copy of the GNU Lesser General Public          License along with this library; if not, write to the Free Software          Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          The full text of the license can be found in lgpl.txt          ******************************************************************/#include "CAbstractEditor.h"#include "LStdControl.h"#include "LMsgEditField.h"#include "LGAColorSwatchControl.h"#include "OMediaString.h"#include "OMediaDBObject.h"CAbstractEditor::CAbstractEditor(omt_ChunkType type, omt_FSChunkID id,									CDBDocument	*myDocument):LCommander(myDocument){	this->myDocument = myDocument;	this->chkInfo.ctype = type;	this->chkInfo.id = id;	this->window = NULL;	this->dbase = myDocument->dbase;	this->quietClose = false;		myDocument->editors[chkInfo] = this;	object = dbase->get_object(type,id);}CAbstractEditor::~CAbstractEditor(){	dbeditor_Map::iterator		map_i;		map_i = myDocument->editors.find(chkInfo);	if (map_i!=myDocument->editors.end()) 	{			myDocument->editors.erase(map_i);	}	object->db_unlock();}void CAbstractEditor::ListenToMessage(							MessageT		inMessage,							void*			ioParam) {}void CAbstractEditor::Close(){	if ((mSuperCommander == nil) || mSuperCommander->AllowSubRemoval(this)) {		delete this;	}}Boolean CAbstractEditor::AllowSubRemoval(LCommander*		inSub){	window = NULL;	return true;}void CAbstractEditor::setTitle(){	string title,name;	LStr255	lstr;	if (!window) return;		object->get_chunk_name(name);		title = omd_L2STR(chkInfo.id);		title += " : ";	title += (name.length()==0)?"Untitled":name;	title += " - ";		lstr = myDocument->chunkTypeToString(chkInfo.ctype);	title += myDocument->LStr255toString(lstr);		window->SetDescriptor(lstr=title.c_str());}void CAbstractEditor::addControlListener(int paneID){	LControl	*c;	c = dynamic_cast<LControl*>(window->FindPaneByID(paneID)); Assert_(c != nil);	c->AddListener(this);}void CAbstractEditor::addMsgEditFieldListener(int paneID){	LMsgEditField	*e;	e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	e->AddListener(this);}void CAbstractEditor::getEditFieldInt(int paneID, int &val){	LEditField	*e;		e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	val=e->GetValue();}void CAbstractEditor::getEditFieldFloat(int paneID, double &val){	string	str;		getEditFieldStr(paneID,str);	val = omd_STR2D(str); }void CAbstractEditor::getEditFieldStr(int paneID, string &str){	LEditField	*e;	Str255		pstr;		e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	e->GetDescriptor(pstr);		str = CDBDocument::Str255toString(pstr);}void CAbstractEditor::setEditFieldFloat(int paneID, double val){	LEditField	*e;	LStr255		lstr = omd_D2STR(val).c_str();		e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	e->SetDescriptor(lstr);}void CAbstractEditor::setEditFieldInt(int paneID, int val){	LEditField	*e;	LStr255		lstr = omd_L2STR(val).c_str();		e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	e->SetDescriptor(lstr);}void CAbstractEditor::setEditFieldStr(int paneID, string str){	LEditField	*e;	LStr255		lstr = str.c_str();		e = dynamic_cast<LMsgEditField*>(window->FindPaneByID(paneID)); Assert_(e != nil);	e->SetDescriptor(lstr);}void CAbstractEditor::setControlVal(int paneID, int val){	LControl	*c;	c = dynamic_cast<LControl*>(window->FindPaneByID(paneID)); Assert_(c != nil);	c->SetValue(val);}int CAbstractEditor::getControlVal(int paneID){	LControl	*c;	c = dynamic_cast<LControl*>(window->FindPaneByID(paneID)); Assert_(c != nil);	return c->GetValue();}void CAbstractEditor::setCaptionDesc(int paneID, string desc){	LCaption	*c;	LStr255		lstr = desc.c_str();	c = dynamic_cast<LCaption*>(window->FindPaneByID(paneID)); Assert_(c != nil);	c->SetDescriptor(lstr);}void CAbstractEditor::setColorSwatch(int paneID, OMediaFARGBColor &frgb){	LGAColorSwatchControl	*c;	RGBColor				rgb;		rgb.red = frgb.red * 0xFFFF;	rgb.green = frgb.green * 0xFFFF;	rgb.blue = frgb.blue * 0xFFFF;		c = dynamic_cast<LGAColorSwatchControl*>(window->FindPaneByID(paneID)); Assert_(c != nil);	c->SetSwatchColor(rgb);}void CAbstractEditor::setCaptionObjDesc(int paneID, OMediaDBObject *obj){	if (obj==NULL)	{		setCaptionDesc(paneID,"- NONE -");		}	else	{		string	str,name;				obj->get_chunk_name(name);		if (name.length()==0) name = "Untitled";				str = omd_L2STR(obj->get_chunk_ID());		str += " : ";		str += name;		setCaptionDesc(paneID,str);		}}void CAbstractEditor::updateObjectPickZone(int baseID, OMediaDBObject *obj){	LControl *c;	setCaptionObjDesc(baseID,obj);	if (!obj) 	{		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+1)); Assert_(c != nil);		c->Enable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+2)); Assert_(c != nil);		c->Disable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+3)); Assert_(c != nil);		c->Disable();	}	else	{		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+1)); Assert_(c != nil);		c->Enable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+2)); Assert_(c != nil);		c->Enable();		c = dynamic_cast<LControl*>(window->FindPaneByID(baseID+3)); Assert_(c != nil);		c->Enable();		}}void CAbstractEditor::setBlendPopup(int paneID, omt_BlendFunc func){	switch(func)	{		case omblendfc_Zero: 					setControlVal(paneID,1); break;		case omblendfc_One:						setControlVal(paneID,2); break;		case omblendfc_Dst_Color:				setControlVal(paneID,3); break;		case omblendfc_Src_Color:				setControlVal(paneID,4); break;		case omblendfc_Inv_Dst_Color:			setControlVal(paneID,5); break;		case omblendfc_Inv_Src_Color:			setControlVal(paneID,6); break;		case omblendfc_Src_Alpha:				setControlVal(paneID,7); break;		case omblendfc_Inv_Src_Alpha:			setControlVal(paneID,8); break;		case omblendfc_Dst_Alpha:				setControlVal(paneID,9); break;		case omblendfc_Inv_Dst_Alpha:			setControlVal(paneID,10); break;		case omblendfc_Src_Alpha_Saturate:		setControlVal(paneID,11); break;	}}omt_BlendFunc CAbstractEditor::getBlendPopup(int paneID){	int id = getControlVal(paneID);	switch(id)	{		case 1: return omblendfc_Zero;		case 2: return omblendfc_One;		case 3: return omblendfc_Dst_Color;		case 4: return omblendfc_Src_Color;		case 5: return omblendfc_Inv_Dst_Color;		case 6: return omblendfc_Inv_Src_Color;		case 7: return omblendfc_Src_Alpha;		case 8: return omblendfc_Inv_Src_Alpha;		case 9: return omblendfc_Dst_Alpha;		case 10: return omblendfc_Inv_Dst_Alpha;		case 11: return omblendfc_Src_Alpha_Saturate;	}		return omblendfc_Zero;}void CAbstractEditor::objectWillDie(omt_ChunkType dtype, omt_FSChunkID did){}void CAbstractEditor::objectRenamed(omt_ChunkType dtype, omt_FSChunkID did){}