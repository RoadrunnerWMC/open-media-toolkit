/*****************************************************************        O P E N      M E D I A     T O O L K I T              V2.5             Copyright Yves Schmid 1996-2003         See www.garagecube.com for more informations about this library.                Author(s): Yves Schmid         OMT is provided under LGPL:           This library is free software; you can redistribute it and/or          modify it under the terms of the GNU Lesser General Public          License as published by the Free Software Foundation; either          version 2.1 of the License, or (at your option) any later version.          This library is distributed in the hope that it will be useful,          but WITHOUT ANY WARRANTY; without even the implied warranty of          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          Lesser General Public License for more details.          You should have received a copy of the GNU Lesser General Public          License along with this library; if not, write to the Free Software          Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          The full text of the license can be found in lgpl.txt          ******************************************************************/#ifndef _H_CDBDocument#define _H_CDBDocument#pragma once#include <LSingleDoc.h>#include <UStandardDialogs.h>#include <LPeriodical.h>#include <map>#include <set>#include "OMediaDataBase.h"#include "OMediaMonitorMap.h"#include "CTempStream.h"class LDBHierTable;class CAbstractEditor;class CDBBlock{	public:		omt_ChunkType			ctype;	omt_FSChunkID			id;	string					desc;		static bool				sortByDesc;	bool operator<(const CDBBlock &x) const	{		if (sortByDesc) return desc<x.desc;					if (ctype==x.ctype) return id<x.id;		return ctype<x.ctype;	}};typedef less<CDBBlock>	cdbblock_Less;typedef set<CDBBlock,cdbblock_Less>	cdbblock_Set;typedef map<CDBBlock,CAbstractEditor*,cdbblock_Less>	dbeditor_Map;class CDBDocument : public LSingleDoc,					public LListener,					public LPeriodical {public:							CDBDocument(								LCommander*			inSuper,								FSSpec*				inFileSpec);	virtual					~CDBDocument();	virtual Boolean			IsModified();		virtual void			DoAESave(								FSSpec&				inFileSpec,								OSType				inFileType);	virtual void			DoSave();	virtual void			DoRevert();	virtual Boolean			AskSaveAs(								FSSpec&				outFSSpec,								Boolean				inRecordIt);	virtual OSType			GetFileType() const;	virtual Boolean			ObeyCommand(								CommandT			inCommand,								void*				ioParam = nil);									virtual void			FindCommandStatus(								CommandT			inCommand,								Boolean&			outEnabled,								Boolean&			outUsesMark,								UInt16&				outMark,								Str255				outName);						virtual void	ListenToMessage(							MessageT		inMessage,							void*			ioParam);	static	bool			HasResourceFork(								const FSSpec&		inFile);	static	bool			HasResourceFork(								const LFile&		inFile);	void create();	void import();	void doImportFiles(int mode);	void importCanvasOptions(LWindow *super);	void import3DShapeOptions(LWindow *superWin);	void importCanvas(FSSpec documentFSSpec);	void importSound(FSSpec documentFSSpec);	void import3DShape(FSSpec documentFSSpec);	void importCustom(FSSpec documentFSSpec);	virtual void quietCloseEditorFor(omt_ChunkType dtype, omt_FSChunkID did);	virtual void objectWillDie(omt_ChunkType dtype, omt_FSChunkID did);	virtual void objectRenamed(omt_ChunkType dtype, omt_FSChunkID did);	virtual bool canEditObjectType(omt_ChunkType dtype);	virtual bool canEditSelection();	virtual void selectionToBlockSet(cdbblock_Set &blockSet);	void updateInfoCaptions(void);	static LStr255 chunkTypeToString(omt_ChunkType ct);		static string	LStr255toString(LStr255 pstr);	static string	Str255toString(Str255 pstr);	static MessageT AskForRename(LCommander*	inSuper,									ResIDT			inDialogID,									string			&name);	virtual	void		SpendTime( const EventRecord& inMacEvent );	void edit(omt_ChunkType type, omt_FSChunkID id);	bool pickObject(LWindow *superwin, omt_ChunkType type, omt_FSChunkID &id);protected:	void objectWillDieRemoveDepencies(omt_ChunkType dtype, omt_FSChunkID did);	virtual void			NameNewDoc();	virtual void			OpenFile(FSSpec& inFileSpec);		PP_StandardDialogs::LFileDesignator*	mFileDesignator;	public:	// My data	LDBHierTable			*mHierarchyView;	LStdPopupMenu			*sortPopup;	dbeditor_Map			editors;	// OMT Data		OMediaStream			*dbstream;	OMediaDataBase			*dbase;	private:							CDBDocument();							CDBDocument(const CDBDocument& inOriginal);			CDBDocument&	operator=(const CDBDocument& inRhs);	};#endif // _H_CDBDocument