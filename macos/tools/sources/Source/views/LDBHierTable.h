/*****************************************************************        O P E N      M E D I A     T O O L K I T              V2.5             Copyright Yves Schmid 1996-2003         See www.garagecube.com for more informations about this library.                Author(s): Yves Schmid         OMT is provided under LGPL:           This library is free software; you can redistribute it and/or          modify it under the terms of the GNU Lesser General Public          License as published by the Free Software Foundation; either          version 2.1 of the License, or (at your option) any later version.          This library is distributed in the hope that it will be useful,          but WITHOUT ANY WARRANTY; without even the implied warranty of          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          Lesser General Public License for more details.          You should have received a copy of the GNU Lesser General Public          License along with this library; if not, write to the Free Software          Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA          The full text of the license can be found in lgpl.txt          ******************************************************************/#ifndef _H_LDBHierTable#define _H_LDBHierTable#pragma once#include <LTextHierTable.h>#include <UNavigableTable.h>#include "OMediaDataBase.h"#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantclass CDBDocument;// ---------------------------------------------------------------------------typedef less<omt_FSChunkID> compareLess_ChunkType;typedef map<omt_FSChunkID,bool,compareLess_ChunkType> ChunkTypeCollapsedMap;// ---------------------------------------------------------------------------enum CCellDBSortMode{	sortcell_Name,	sortcell_Size,	sortcell_ID};class CCellDBData{	public:	Str255					desc;	bool					isChunkTypeTitle;		omt_ChunkType			ctype;	omt_FSChunkID			id;		unsigned long			size;		static CCellDBSortMode	sortMode;		bool operator<(const CCellDBData &x) const	{		switch(sortMode)		{			case sortcell_Size:			return size<x.size;						case sortcell_ID:			return id<x.id;					default:			return ::CompareString(desc,x.desc,NULL)<0;		}	}};class LDBHierTable : public LTextHierTable,					 public LCommander {public:	enum { class_ID = FOUR_CHAR_CODE('DBht') };						LDBHierTable( LStream* inStream );							virtual				~LDBHierTable();	virtual void		DrawCell(const STableCell&	inCell, const Rect&	inLocalRect);		virtual void		rebuildTable();	virtual void 		clearTable();	bool hasSelection();	int countSelection();	bool oneIDSelected();	void rename();	void edit();	LStr255 sizeToStr(SInt32 s);	long computeTotalSizeChunkType(omt_ChunkType ct);	void HiliteCell(const STableCell&	inCell,							Boolean				inHilite);				virtual void		HiliteCellActively(								const STableCell&	inCell,								Boolean				inHilite);									virtual void		HiliteCellInactively(								const STableCell&	inCell,								Boolean				inHilite);	virtual void SelectionChanged();	UInt32		GetWideOpenIndex(UInt32			inExposedIndex)	{		return mCollapsableTree->GetWideOpenIndex(inExposedIndex);	}			virtual void changeSortMode(CCellDBSortMode newMode);	virtual void sortCells(void);		void applyFilter(Str255 &str);	void makeCollapsedMap(bool reset = false);	void Click(SMouseDownEvent	&inMouseDown );	Boolean ObeyCommand(CommandT	inCommand,void*		ioParam);	void FindCommandStatus(CommandT	inCommand,							Boolean		&outEnabled,							Boolean		&outUsesMark,							UInt16		&outMark,							Str255		outName);	virtual void		ClickSelf( const SMouseDownEvent& inMouseDown );				OMediaDataBase		*dbase;	CDBDocument			*myDocument;	CCellDBSortMode			sortMode;	string					filterString;	ChunkTypeCollapsedMap	collMap;};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif